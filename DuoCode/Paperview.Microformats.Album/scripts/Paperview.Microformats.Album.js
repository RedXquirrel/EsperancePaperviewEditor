/*!
* Paperview.Microformats.Album, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
*
* Generated by DuoCode Compiler 2.0.1542.0 [Trial]
*/
(function Paperview_Microformats_Album() {
"use strict";
var $asm = {
    fullName: "Paperview.Microformats.Album",
    anonymousTypes: [],
    types: [],
    $getAttrs: function() { return [new System.Reflection.AssemblyTitleAttribute.ctor("ClassLibrary"), new System.Reflection.AssemblyDescriptionAttribute.ctor(""), new System.Reflection.AssemblyConfigurationAttribute.ctor(""), new System.Reflection.AssemblyCompanyAttribute.ctor(""), new System.Reflection.AssemblyProductAttribute.ctor("ClassLibrary"), new System.Reflection.AssemblyCopyrightAttribute.ctor("Copyright \xA9  2015"), new System.Reflection.AssemblyTrademarkAttribute.ctor(""), new System.Reflection.AssemblyCultureAttribute.ctor(""), new System.Reflection.AssemblyVersionAttribute.ctor("1.0.0.0"), new System.Reflection.AssemblyFileVersionAttribute.ctor("1.0.0.0"), new DuoCode.Runtime.CompilerAttribute.ctor("2.0.1542.0")]; }
};
var $g = (typeof(global) !== "undefined" ? global : (typeof(window) !== "undefined" ? window : self));
var Paperview = $g.Paperview = $g.Paperview || {};
Paperview.Microformats = Paperview.Microformats || {};
Paperview.Microformats.Album = Paperview.Microformats.Album || {};
Paperview.Microformats.Album.Interfaces = Paperview.Microformats.Album.Interfaces || {};
var $d = DuoCode.Runtime;
$d.$assemblies["Paperview.Microformats.Album"] = $asm;
Paperview.Microformats.Album.AlbumMicroformat = $d.declare("Paperview.Microformats.Album.AlbumMicroformat", 
    0, $asm);
Paperview.Microformats.Album.Artefacts = $d.declare("Paperview.Microformats.Album.Artefacts", 0, $asm);
Paperview.Microformats.Album.Image = $d.declare("Paperview.Microformats.Album.Image", 0, $asm);
$d.define(Paperview.Microformats.Album.AlbumMicroformat, null, function($t, $p) {
    $t.$ator = function() {
        this.Document = null;
        this.Legal = null;
        this.Publisher = null;
        this.Artifacts = null;
    };
    $t.ctor = function AlbumMicroformat() {
        $t.$baseType.ctor.call(this);
    };
    $t.ctor.prototype = $p;
    $p.get_Document = function AlbumMicroformat_get_Document() { return this.Document; };
    $p.set_Document = function AlbumMicroformat_set_Document(value) { this.Document = value;return value; };
    $p.get_Legal = function AlbumMicroformat_get_Legal() { return this.Legal; };
    $p.set_Legal = function AlbumMicroformat_set_Legal(value) { this.Legal = value;return value; };
    $p.get_Publisher = function AlbumMicroformat_get_Publisher() { return this.Publisher; };
    $p.set_Publisher = function AlbumMicroformat_set_Publisher(value) { this.Publisher = value;return value; };
    $p.get_Artifacts = function AlbumMicroformat_get_Artifacts() { return this.Artifacts; };
    $p.set_Artifacts = function AlbumMicroformat_set_Artifacts(value) { this.Artifacts = value;return value; };
});
Paperview.Microformats.Album.Interfaces.IArtefacts = $d.type("Paperview.Microformats.Album.Interfaces.IArtefacts", 66, $asm, function($t, $p) {});
$d.define(Paperview.Microformats.Album.Artefacts, null, function($t, $p) {
    $t.$intfs = [Paperview.Microformats.Album.Interfaces.IArtefacts];
    $t.$ator = function() {
        this.Title = null;
        this.Description = null;
        this.Images = null;
    };
    $t.ctor = function Artefacts() {
        $t.$baseType.ctor.call(this);
    };
    $t.ctor.prototype = $p;
    $p.get_Title = function Artefacts_get_Title() { return this.Title; };
    $p.set_Title = function Artefacts_set_Title(value) { this.Title = value;return value; };
    $p.get_Description = function Artefacts_get_Description() { return this.Description; };
    $p.set_Description = function Artefacts_set_Description(value) { this.Description = value;return value; };
    $p.get_Images = function Artefacts_get_Images() { return this.Images; };
    $p.set_Images = function Artefacts_set_Images(value) { this.Images = value;return value; };
    $p.Paperview$Microformats$Album$Interfaces$IArtefacts$get_Title = $p.get_Title;
    $p.Paperview$Microformats$Album$Interfaces$IArtefacts$set_Title = $p.set_Title;
    $p.Paperview$Microformats$Album$Interfaces$IArtefacts$get_Description = $p.get_Description;
    $p.Paperview$Microformats$Album$Interfaces$IArtefacts$set_Description = $p.set_Description;
    $p.Paperview$Microformats$Album$Interfaces$IArtefacts$get_Images = $p.get_Images;
    $p.Paperview$Microformats$Album$Interfaces$IArtefacts$set_Images = $p.set_Images;
});
Paperview.Microformats.Album.Interfaces.IImage = $d.type("Paperview.Microformats.Album.Interfaces.IImage", 66, $asm, function($t, $p) {});
$d.define(Paperview.Microformats.Album.Image, null, function($t, $p) {
    $t.$intfs = [Paperview.Microformats.Album.Interfaces.IImage];
    $t.$ator = function() {
        this.Base64 = null;
        this.Name = null;
        this.Description = null;
    };
    $t.ctor = function Image() {
        $t.$baseType.ctor.call(this);
    };
    $t.ctor.prototype = $p;
    $p.get_Base64 = function Image_get_Base64() { return this.Base64; };
    $p.set_Base64 = function Image_set_Base64(value) { this.Base64 = value;return value; };
    $p.get_Name = function Image_get_Name() { return this.Name; };
    $p.set_Name = function Image_set_Name(value) { this.Name = value;return value; };
    $p.get_Description = function Image_get_Description() { return this.Description; };
    $p.set_Description = function Image_set_Description(value) { this.Description = value;return value; };
    $p.Paperview$Microformats$Album$Interfaces$IImage$get_Base64 = $p.get_Base64;
    $p.Paperview$Microformats$Album$Interfaces$IImage$set_Base64 = $p.set_Base64;
    $p.Paperview$Microformats$Album$Interfaces$IImage$get_Name = $p.get_Name;
    $p.Paperview$Microformats$Album$Interfaces$IImage$set_Name = $p.set_Name;
    $p.Paperview$Microformats$Album$Interfaces$IImage$get_Description = $p.get_Description;
    $p.Paperview$Microformats$Album$Interfaces$IImage$set_Description = $p.set_Description;
});
return $asm;
})();
//# sourceMappingURL=Paperview.Microformats.Album.js.map
